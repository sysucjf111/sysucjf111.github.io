<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>osquery拓展与主程序通信源码句读</title>
    <link href="/2022/06/24/osquery%E6%8B%93%E5%B1%95%E4%B8%8E%E4%B8%BB%E7%A8%8B%E5%BA%8F%E9%80%9A%E4%BF%A1%E6%BA%90%E7%A0%81%E5%8F%A5%E8%AF%BB/"/>
    <url>/2022/06/24/osquery%E6%8B%93%E5%B1%95%E4%B8%8E%E4%B8%BB%E7%A8%8B%E5%BA%8F%E9%80%9A%E4%BF%A1%E6%BA%90%E7%A0%81%E5%8F%A5%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><ul><li>了解osquery的拓展的实现原理，包括拓展与osquery进程之间的通信协议、基础交互、注册与调用关系等等。</li></ul><h1 id="阅读备注"><a href="#阅读备注" class="headerlink" title="阅读备注"></a>阅读备注</h1><ul><li><p><code>(数字)</code> 表示调试过程进入。<code>[数字]</code>表示调试过程返回。数字表示这一次跳转的顺序。</p></li><li><p><code>osquery/server.go</code>表示osquery包下的server.go文件。</p></li><li><p>一个.go文件中type&#x2F;func&#x2F;interface的书写顺序对应代码中的布局位置。</p></li></ul><h1 id="代码内容"><a href="#代码内容" class="headerlink" title="代码内容"></a>代码内容</h1><h2 id="拓展my-go-0"><a href="#拓展my-go-0" class="headerlink" title="拓展my.go(0)"></a>拓展my.go(0)</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;context&quot;</span><br><span class="hljs-string">&quot;github.com/osquery/osquery-go&quot;</span><br><span class="hljs-string">&quot;github.com/osquery/osquery-go/plugin/table&quot;</span><br><span class="hljs-string">&quot;log&quot;</span><br><span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(os.Args) != <span class="hljs-number">2</span> &#123;<br>log.Fatalf(<span class="hljs-string">`Usage: %s SOCKET_PATH`</span>, os.Args[<span class="hljs-number">0</span>])<br>&#125;<br><br>server, err := osquery.NewExtensionManagerServer(<span class="hljs-string">&quot;foobar&quot;</span>, os.Args[<span class="hljs-number">1</span>])<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Error creating extension: %s\n&quot;</span>, err)<br>&#125;<br><br><span class="hljs-comment">// Create and register a new table plugin with the server.</span><br><span class="hljs-comment">// table.NewPlugin requires the table plugin name,</span><br><span class="hljs-comment">// a slice of Columns and a Generate function.</span><br>server.RegisterPlugin(table.NewPlugin(<span class="hljs-string">&quot;foobar&quot;</span>, FoobarColumns(), FoobarGenerate))<br><span class="hljs-keyword">if</span> err := server.Run(); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(err)<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// FoobarColumns returns the columns that our table will return.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FoobarColumns</span><span class="hljs-params">()</span></span> []table.ColumnDefinition &#123;<br><span class="hljs-keyword">return</span> []table.ColumnDefinition&#123;<br>table.TextColumn(<span class="hljs-string">&quot;foo&quot;</span>),<br>table.TextColumn(<span class="hljs-string">&quot;baz&quot;</span>),<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// FoobarGenerate will be called whenever the table is queried. It should return</span><br><span class="hljs-comment">// a full table scan.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FoobarGenerate</span><span class="hljs-params">(ctx context.Context, queryContext table.QueryContext)</span></span> ([]<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">string</span>&#123;<br>&#123;<br><span class="hljs-string">&quot;foo&quot;</span>: <span class="hljs-string">&quot;bar&quot;</span>,<br><span class="hljs-string">&quot;baz&quot;</span>: <span class="hljs-string">&quot;baz&quot;</span>,<br>&#125;,<br>&#123;<br><span class="hljs-string">&quot;foo&quot;</span>: <span class="hljs-string">&quot;bar&quot;</span>,<br><span class="hljs-string">&quot;baz&quot;</span>: <span class="hljs-string">&quot;baz&quot;</span>,<br>&#125;,<br>&#125;, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="16"><a href="#16" class="headerlink" title="16"></a>16</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">server, err := osquery.NewExtensionManagerServer(<span class="hljs-string">&quot;foobar&quot;</span>, os.Args[<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>NewExtensionManagerServer 创建一个extension management server，使用在路径上的socket(os.Args[1])与osquery沟通。</p><h2 id="osquery-x2F-osquery-go"><a href="#osquery-x2F-osquery-go" class="headerlink" title="osquery&#x2F;osquery.go"></a>osquery&#x2F;osquery.go</h2><h3 id="type-Extension-interface"><a href="#type-Extension-interface" class="headerlink" title="type Extension interface"></a>type Extension interface</h3><h4 id="func-Ping"><a href="#func-Ping" class="headerlink" title="func Ping"></a>func Ping</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">Ping(ctx context.Context) (_r *ExtensionStatus, _err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><ul><li>参数ctx是context包的Context类型。context.Context 可以在不同 Goroutine 之间同步请求特定数据，例如可以用ctx.Done()返回的Channel作为不同协程之间的同步信号。</li><li>返回值_r是一个ExtensionStatus指针</li></ul><h3 id="type-ExtensionStatus-struct"><a href="#type-ExtensionStatus-struct" class="headerlink" title="type ExtensionStatus struct"></a>type ExtensionStatus struct</h3><p>字段内容：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ExtensionStatus <span class="hljs-keyword">struct</span> &#123;<br>Code    <span class="hljs-type">int32</span>              <span class="hljs-string">`thrift:&quot;code,1&quot; db:&quot;code&quot; json:&quot;code&quot;`</span><br>Message <span class="hljs-type">string</span>             <span class="hljs-string">`thrift:&quot;message,2&quot; db:&quot;message&quot; json:&quot;message&quot;`</span><br>UUID    ExtensionRouteUUID <span class="hljs-string">`thrift:&quot;uuid,3&quot; db:&quot;uuid&quot; json:&quot;uuid&quot;`</span><br>&#125;<br></code></pre></td></tr></table></figure><p>ExtensionStatus是一个结构体，可以按照json、sql、Thrift方式编解码，并制定了对应的字段名。</p><h2 id="osquery-x2F-server-go"><a href="#osquery-x2F-server-go" class="headerlink" title="osquery&#x2F;server.go"></a>osquery&#x2F;server.go</h2><h3 id="type-ExtensionManagerServer-struct"><a href="#type-ExtensionManagerServer-struct" class="headerlink" title="type ExtensionManagerServer struct"></a>type ExtensionManagerServer struct</h3><p>ExtensionManagerServer是ExtensionManager API（接口）的完整实现。一个Plugin可以使用extension manager进行注册，并且由extension manager处理与osquery进程的通信。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> ExtensionManagerServer <span class="hljs-keyword">struct</span> &#123;<br>name         <span class="hljs-type">string</span><br>version      <span class="hljs-type">string</span><br>sockPath     <span class="hljs-type">string</span><br>serverClient ExtensionManager<br>registry     <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>](<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]OsqueryPlugin)<br>server       thrift.TServer<br>transport    thrift.TServerTransport<br>timeout      time.Duration<br>pingInterval time.Duration <span class="hljs-comment">// How often to ping osquery server</span><br>mutex        sync.Mutex<br>uuid         osquery.ExtensionRouteUUID<br>started      <span class="hljs-type">bool</span> <span class="hljs-comment">// Used to ensure tests wait until the server is actually started</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="关键字段"><a href="#关键字段" class="headerlink" title="关键字段"></a>关键字段</h4><ul><li>sockPath，socket路径名。</li><li>serverClient，这个字段封装了socket连接(管道)以及同于与osquery进程沟通的Client。</li><li>server和transport待看。设想是osquery进程作为Thrift的server、pipe封装在tranport中。</li></ul><h3 id="type-ServerOption-func"><a href="#type-ServerOption-func" class="headerlink" title="type ServerOption func"></a>type ServerOption func</h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> <span class="hljs-type">ServerOption</span> func(*<span class="hljs-type">ExtensionManagerServer</span>)<br></code></pre></td></tr></table></figure><p>任何以ExtensionManagerServer指针为参数的函数都是ServerOption类型。</p><h3 id="func-NewExtensionMangerServer-1"><a href="#func-NewExtensionMangerServer-1" class="headerlink" title="func NewExtensionMangerServer(1)"></a>func NewExtensionMangerServer(1)</h3><h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">NewExtensionManagerServer(<span class="hljs-params">name</span> <span class="hljs-params">string</span>, <span class="hljs-params">sockPath</span> <span class="hljs-params">string</span>, <span class="hljs-params">opts</span> <span class="hljs-operator">...</span>ServerOption)</span> (*ExtensionManagerServer, error) <br></code></pre></td></tr></table></figure><p>name就是my.go传进来的表名称，sockPath就是my.go传进来的socket路径。</p><p>这个socket路径对应着osqueryi的CLI flag：extensions_socket。在这里为<code>\\.\pipe\shell.em</code>。</p><h4 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h4><h5 id="92-95"><a href="#92-95" class="headerlink" title="92-95"></a>92-95</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">registry := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>](<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]OsqueryPlugin));<br><span class="hljs-keyword">for</span> reg, _ := <span class="hljs-keyword">range</span> validRegistryNames &#123;<br>registry[reg] = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]OsqueryPlugin)<br>&#125;<br></code></pre></td></tr></table></figure><p>validRegistryNames是一个map变量，包含table,logger,config,distributed四个键。这个四个键赋值为registry的键，然后每个键的值是一个值类型为OsqueryPlugin接口的map,map内容没有实现。</p><h5 id="97-103"><a href="#97-103" class="headerlink" title="97-103"></a>97-103</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">manager := &amp;ExtensionManagerServer&#123;<br>    name:         name,<br>    sockPath:     sockPath,<br>    registry:     registry,<br>    timeout:      defaultTimeout,<br>    pingInterval: defaultPingInterval,<br>&#125;<br></code></pre></td></tr></table></figure><p>上面对manage中的一些字段进行了赋值：</p><ul><li>name指定表名</li><li>sockPath指定socket连接名</li><li>regitry给出osquery的插件注册信息。</li></ul><h5 id="105-107"><a href="#105-107" class="headerlink" title="105-107"></a>105-107</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> _, opt := <span class="hljs-keyword">range</span> opts &#123;<br>    opt(manager)<br>&#125;<br></code></pre></td></tr></table></figure><p>opt是ServerOption类型函数，对ExtensionManagerServer类型的manager进行一些处理。这里没有进入for循环。</p><h5 id="109"><a href="#109" class="headerlink" title="109"></a>109</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">serverClient, err := NewClient(sockPath, manager.timeout)<br></code></pre></td></tr></table></figure><p>进入NewClient函数。</p><h2 id="osquery-x2F-client-go"><a href="#osquery-x2F-client-go" class="headerlink" title="osquery&#x2F;client.go"></a>osquery&#x2F;client.go</h2><h3 id="func-NewClient-2"><a href="#func-NewClient-2" class="headerlink" title="func NewClient(2)"></a>func NewClient(2)</h3><p>NewClient创建一个extension的client端，client通过socket与osquery通信。</p><h4 id="声明-1"><a href="#声明-1" class="headerlink" title="声明"></a>声明</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewClient</span><span class="hljs-params">(path <span class="hljs-type">string</span>, timeout time.Duration)</span></span> (*ExtensionManagerClient, <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><ul><li>path是socket路径</li></ul><h4 id="内容-1"><a href="#内容-1" class="headerlink" title="内容"></a>内容</h4><h5 id="36"><a href="#36" class="headerlink" title="36"></a>36</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">trans, err := transport.Open(path, timeout)<br></code></pre></td></tr></table></figure><p>进入Open函数。</p><h2 id="transport-x2F-transport-windows-go"><a href="#transport-x2F-transport-windows-go" class="headerlink" title="transport&#x2F;transport_windows.go"></a>transport&#x2F;transport_windows.go</h2><h3 id="func-Open-3"><a href="#func-Open-3" class="headerlink" title="func Open(3)"></a>func Open(3)</h3><p>Open 打开一个named pipe，返回一个Thrift包中定义的TSocket。TScoket实现了接口TTransport；TTransport封装了I&#x2F;O层</p><h4 id="声明-2"><a href="#声明-2" class="headerlink" title="声明"></a>声明</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Open</span><span class="hljs-params">(path <span class="hljs-type">string</span>, timeout time.Duration)</span></span> (*thrift.TSocket, <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><h4 id="内容-2"><a href="#内容-2" class="headerlink" title="内容"></a>内容</h4><h5 id="19"><a href="#19" class="headerlink" title="19"></a>19</h5><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">conn, err := winio.DialPipe(path, <span class="hljs-meta">&amp;timeout)</span><br></code></pre></td></tr></table></figure><p>使用winio.Dialpipe，根据socket路径以及timeout建立连接。</p><h2 id="thrift-x2F-socket-go"><a href="#thrift-x2F-socket-go" class="headerlink" title="thrift&#x2F;socket.go"></a>thrift&#x2F;socket.go</h2><h3 id="type-TSocket-struct"><a href="#type-TSocket-struct" class="headerlink" title="type TSocket struct"></a>type TSocket struct</h3><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> <span class="hljs-type">TSocket</span> struct &#123;<br>conn *socketConn<br>addr net.<span class="hljs-type">Addr</span><br>cfg  *<span class="hljs-type">TConfiguration</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个结构体实现了TTransport接口。TTransport接口封装了I&#x2F;O layer的信息。在这个实现中使用的是*socketConn的conn具体实现socket连接。</p><h2 id="thrift-x2F-socket-conn-go"><a href="#thrift-x2F-socket-conn-go" class="headerlink" title="thrift&#x2F;socket_conn.go"></a>thrift&#x2F;socket_conn.go</h2><h3 id="type-socketConn-struct"><a href="#type-socketConn-struct" class="headerlink" title="type socketConn struct"></a>type socketConn struct</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> socketConn <span class="hljs-keyword">struct</span> &#123;<br>net.Conn<br><br>buffer [<span class="hljs-number">1</span>]<span class="hljs-type">byte</span><br>closed <span class="hljs-type">int32</span><br>&#125;<br></code></pre></td></tr></table></figure><p>socketConn是封装的net.Conn，能进行connectivity check。</p><p>net.Conn是net包下的一个用于表示网络连接的接口。除了类似IO的Read,Write,Close方法之外，还可以设置Deadline。Deadline是一个绝对的时间，超过Deadline的所有IO操作会直接fail而不会阻塞。</p><h2 id="winio-x2F-pipe-go"><a href="#winio-x2F-pipe-go" class="headerlink" title="winio&#x2F;pipe.go"></a>winio&#x2F;pipe.go</h2><h3 id="func-DialPipe-4"><a href="#func-DialPipe-4" class="headerlink" title="func DialPipe(4)"></a>func DialPipe(4)</h3><h4 id="声明-3"><a href="#声明-3" class="headerlink" title="声明"></a>声明</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">DialPipe</span><span class="hljs-params">(path <span class="hljs-type">string</span>, timeout *time.Duration)</span></span> (net.Conn, <span class="hljs-type">error</span>) &#123;<br></code></pre></td></tr></table></figure><p>DialPipe根据路径连接到named pipe(命名管道)，如果connection超过特定duration就会timeout。</p><p>命名管道是windows的win32io工具之一。</p><blockquote><p>pipe是进程之间用于通信的共享内存。创建pipe的进程叫pipe server，连接到pipe的进程叫pipe client。</p><p>pipe有两种类型，一种是anonymous pipe(匿名管道)，一种是named pipe(命名管道)。pipe可以是单向也可以是双向。</p><p>匿名管道是一个未命名的单向管道，通常在父进程和子进程之间传输数据。</p><p>named pipe(是一个命名的单向或双工管道，能够在一个pipe server和一到多个pipe client之间通信。</p><p>一个named pipe的所有实例的name相同，但是每个实例都有自己的buffer和handle，client&#x2F;server之间也提供独立的通信渠道。实例的机制允许多个client能够同步使用一个pipe。</p><p>server端创建一个named pipe的函数时CreateNamePipe，连接一个named Pipe的函数是ConnectNamedPipe。Client端使用CreateFile或者CallNamedPipe连接到一个named pipe。</p><p>DialPipe中使用的是createFile函数。</p></blockquote><h5 id="144-149"><a href="#144-149" class="headerlink" title="144-149"></a>144-149</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> absTimeout time.Time<br><span class="hljs-keyword">if</span> timeout != <span class="hljs-literal">nil</span> &#123;<br>    absTimeout = time.Now().Add(*timeout)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    absTimeout = time.Now().Add(time.Second * <span class="hljs-number">2</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>当前时间+timeout得到absTimeout。</p><h5 id="150-164"><a href="#150-164" class="headerlink" title="150-164"></a>150-164</h5><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> err <span class="hljs-type">error</span><br><span class="hljs-keyword">var</span> h syscall.Handle<br><span class="hljs-keyword">for</span> &#123;<br>    h, err = createFile(path, syscall.GENERIC_READ|syscall.GENERIC_WRITE, <span class="hljs-number">0</span>, <span class="hljs-literal">nil</span>, syscall.OPEN_EXISTING, syscall.FILE_FLAG_OVERLAPPED|cSECURITY_SQOS_PRESENT|cSECURITY_ANONYMOUS, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> err != cERROR_PIPE_BUSY &#123;<br>        <span class="hljs-keyword">break</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> time.Now().After(absTimeout) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, ErrTimeout<br>    &#125;<br><br>    <span class="hljs-comment">// Wait 10 msec and try again. This is a rather simplistic</span><br>    <span class="hljs-comment">// view, as we always try each 10 milliseconds.</span><br>    time.Sleep(time.Millisecond * <span class="hljs-number">10</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码就是连接到一个named pipe的实例的过程。</p><p>先创建一个err还有一个表示named pipe的handle的变量h。使用createFile来连接到一个named pipe。</p><p>传入createFile中的几个参数的解释，参考<a href="https://docs.microsoft.com/zh-cn/windows/win32/api/fileapi/nf-fileapi-createfilew%EF%BC%9A">https://docs.microsoft.com/zh-cn/windows/win32/api/fileapi/nf-fileapi-createfilew：</a></p><ul><li>path, socket连接的路径</li><li>syscall.GENERIC_READ|syscall.GENERIC_WRITE, 表示的是这个IO device的access(权限)为可读可写</li><li>0,表示这个io必须单独被使用，不能多个进程一并使用</li><li>nil, 这个值取nil说明返回的handle不能被这个divice的子进程继承</li><li>syscall.OPEN_EXISTING, 意思就是只有在io device存在的时候才打开它</li><li>syscall.FILE_FLAG_OVERLAPPED|cSECURITY_SQOS_PRESENT|cSECURITY_ANONYMOUS, device相关attribute参数</li><li>0，不提供模板文件。模板文件指提供attribute参数的文件。</li></ul><h2 id="winio-x2F-zsyscall-windows-go"><a href="#winio-x2F-zsyscall-windows-go" class="headerlink" title="winio&#x2F;zsyscall_windows.go"></a>winio&#x2F;zsyscall_windows.go</h2><h3 id="function-createFile-5"><a href="#function-createFile-5" class="headerlink" title="function createFile(5)"></a>function createFile(5)</h3><h4 id="声明-4"><a href="#声明-4" class="headerlink" title="声明"></a>声明</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">createFile</span><span class="hljs-params">(name <span class="hljs-type">string</span>, access <span class="hljs-type">uint32</span>, mode <span class="hljs-type">uint32</span>, sa *syscall.SecurityAttributes, createmode <span class="hljs-type">uint32</span>, attrs <span class="hljs-type">uint32</span>, templatefile syscall.Handle)</span></span> (handle syscall.Handle, err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><h4 id="内容-3"><a href="#内容-3" class="headerlink" title="内容"></a>内容</h4>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>osquery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编译一个osquery-go扩展的流程</title>
    <link href="/2022/06/23/%E7%BC%96%E8%AF%91%E4%B8%80%E4%B8%AAosquery-go%E6%89%A9%E5%B1%95%E7%9A%84%E6%B5%81%E7%A8%8B/"/>
    <url>/2022/06/23/%E7%BC%96%E8%AF%91%E4%B8%80%E4%B8%AAosquery-go%E6%89%A9%E5%B1%95%E7%9A%84%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>参考<a href="https://github.com/osquery/osquery-go">https://github.com/osquery/osquery-go</a> </p><p>结合多种参考资料对官方给出的extension编译流程进行修改以及补充.</p><h1 id="osquery-go拓展的编译和部署"><a href="#osquery-go拓展的编译和部署" class="headerlink" title="osquery go拓展的编译和部署"></a>osquery go拓展的编译和部署</h1><p>假如已经写好了一个go拓展，快速验证它是否生效的方法：</p><p>MobaXTerm中，先在一个session启动osqueryi，然后查看osqueryi的socket：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">root@cjf:~/osquery# osqueryi --nodisable<span class="hljs-emphasis">_extensions</span><br><span class="hljs-emphasis">Using a virtual database. Need help, type &#x27;.help&#x27;</span><br><span class="hljs-emphasis">osquery&gt; select value from osquery_flags where name = &#x27;extensions_</span>socket&#x27;;<br><span class="hljs-code">+-------------------------+</span><br><span class="hljs-section">| value                   |</span><br><span class="hljs-section">+-------------------------+</span><br><span class="hljs-section">| /root/.osquery/shell.em |</span><br><span class="hljs-section">+-------------------------+</span><br><br></code></pre></td></tr></table></figure><p>打开另一个session，执行<code>go run ./my.go --socket /root/.osquery/shell.em</code>，当前session会进入阻塞状态。</p><p>回到之前的session。查看是否已经存在新创建表，并查看表的内容：</p><p><img src="https://raw.githubusercontent.com/sysucjf111/picbed/main/image-20220622170243861-16559575786341.png" alt="图1"></p><p>在windows上则可以使用goland编写my.go，运行然后再终端中打开osqueryi验证。便于调试。</p><p>如果直接要将go编译生成.ext文件作为osqueryi的CLI取值传入osquery中，就要对示例代码进行如下修改(注释掉示例代码中的部分，因为不能从os.Args中获取socket连接值了)，参考<a href="https://blog.spoock.com/2019/03/17/osquery-extension/%EF%BC%9A">https://blog.spoock.com/2019/03/17/osquery-extension/：</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// socket := flag.String(&quot;socket&quot;, &quot;&quot;, &quot;Path to osquery socket file&quot;)</span><br><span class="hljs-comment">// flag.Parse()</span><br><span class="hljs-comment">// if *socket == &quot;&quot; &#123;</span><br><span class="hljs-comment">// log.Fatalf(`Usage: %s --socket SOCKET_PATH`, os.Args[0])</span><br><span class="hljs-comment">// &#125;</span><br><br><br><span class="hljs-comment">// server, err := osquery.NewExtensionManagerServer(&quot;foobar&quot;, *socket)</span><br>server, err := osquery.NewExtensionManagerServer(<span class="hljs-string">&quot;foobar&quot;</span>, <span class="hljs-string">&quot;/root/.osquery/shell.em&quot;</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalf(<span class="hljs-string">&quot;Error creating extension: %s\n&quot;</span>, err)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>若如此做则需要一个CLI来确定extention的shell：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">osqueryi <span class="hljs-params">--extension</span> my.ext <span class="hljs-params">--extensions_socket=/root/</span><span class="hljs-string">.osquery/shell.em</span><br></code></pre></td></tr></table></figure><p>如果extension注册成功，会出现如下提示：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">I0622</span> <span class="hljs-number">18</span>:<span class="hljs-number">04</span>:<span class="hljs-number">43</span>.<span class="hljs-number">414388</span> <span class="hljs-number">30545</span> interface.cpp:<span class="hljs-number">105</span>] Registering extension (foobar, <span class="hljs-number">60326</span>, version=, sdk=)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/sysucjf111/picbed/main/image-20220622181154284.png" alt="图2"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>osquery</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/06/16/hello-world/"/>
    <url>/2022/06/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
